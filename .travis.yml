language: cpp
# run on new infrastructure
sudo: false
cache:
  apt: true
  directories:
    $RISCV
  timeout: 1000

# required packages to install
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - sourceline: 'deb http://download.opensuse.org/repositories/home:/phiwag:/edatools/xUbuntu_16.04 /'
        key_url: 'https://download.opensuse.org/repositories/home:phiwag:edatools/xUbuntu_16.04/Release.key'
    packages:
      - gcc-7
      - g++-7
      - gperf
      - autoconf
      - automake
      - autotools-dev
      - libmpc-dev
      - libmpfr-dev
      - libgmp-dev
      - gawk
      - build-essential
      - bison
      - flex
      - texinfo
      - python-pexpect
      - libusb-1.0-0-dev
      - default-jdk
      - zlib1g-dev
      - valgrind
      - verilator-4.040
      - device-tree-compiler
env:
  global:
    - RISCV="/home/travis/riscv_install"

branches:
  only:
  - master
  - ariane-dev

before_install:
  - export CXX=g++-7 CC=gcc-7
  # setup dependent paths
  - export PATH=$RISCV/bin:/bin:$PATH
  - export LIBRARY_PATH=$RISCV/lib
  - export LD_LIBRARY_PATH=$RISCV/lib
  - export C_INCLUDE_PATH=$RISCV/include
  - export CPLUS_INCLUDE_PATH=$RISCV/include
  # number of parallel jobs to use for make commands and simulation
  - export NUM_JOBS=4
  - ci/make-tmp.sh
  - git submodule update --init --recursive

stages:
  - sw_build
  - test

jobs:
  include:
    - stage: sw_build
      name: build software
      script:
        # Obtain pre-built toolchain.
        - mkdir -p $RISCV
        - wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2020.04.0-x86_64-linux-ubuntu14.tar.gz
        - tar -x -f riscv64-unknown-elf-gcc-8.3.0-2020.04.0-x86_64-linux-ubuntu14.tar.gz --strip-components=1 -C $RISCV
        - ci/install-spike.sh

    - stage: test
      name: run riscv benchmarks (Write-Back Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-benchmarks-verilator defines=WB_DCACHE

    # asm tests
    - stage: test
      name: run asm tests (Write-Back Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-asm-tests-verilator defines=WB_DCACHE

    # rv64um-*-* tests
    - stage: test
      name: run mul tests (Write-Back Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-mul-verilator defines=WB_DCACHE

    - stage: test
      name: run fp tests (Write-Back Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-fp-verilator defines=WB_DCACHE

    # amo tests
    # rv64ua-v-* tests
    - stage: test
      name: run amo tests (Write-Back Cache)
      script:
        - ci/build-riscv-tests.sh
        - travis_wait 60 make -j${NUM_JOBS} run-amo-verilator defines=WB_DCACHE

    - stage: test
      name: run riscv benchmarks (Write-through Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-benchmarks-verilator  defines=WT_DCACHE

    # asm tests
    # rv64ui-v-* tests
    - stage: test
      name: run asm tests (Write-through Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-asm-tests-verilator defines=WT_DCACHE

    # rv64um-*-* tests
    - stage: test
      name: run mul tests (Write-through Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-mul-verilator defines=WT_DCACHE

    # rv64ud-*-* tests
    - stage: test
      name: run fp tests (Write-through Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-fp-verilator defines=WT_DCACHE

    # amo tests
    # rv64ua-v-* tests
    - stage: test
      name: run amo tests (Write-through Cache)
      script:
        - ci/build-riscv-tests.sh
        - make -j${NUM_JOBS} run-amo-verilator defines=WT_DCACHE

# extra time during long builds
install: travis_wait
